{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hengngua\\\\OneDrive - Intel Corporation\\\\Desktop\\\\Learn\\\\timer\\\\debate-timer2\\\\src\\\\components\\\\DigitalTimer1\\\\index.js\";\nimport { Component } from \"react\";\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DigitalTimer1 extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isTimerRunning: false,\n      timerLimit: 4,\n      currentRunningSeconds: 0\n    };\n\n    this.clearTimer = () => {\n      clearInterval(this.intervalId);\n    };\n\n    this.onClickResetTimer = () => {\n      // this.notifyTimerReset('Timer has me reset to default')\n      this.setState({\n        isTimerRunning: false,\n        timerLimit: 25,\n        currentRunningSeconds: 0\n      });\n      this.clearTimer();\n    };\n\n    this.startStopTimer = () => {\n      const {\n        isTimerRunning,\n        currentRunningSeconds,\n        timerLimit\n      } = this.state;\n      this.setState(prevState => ({\n        isTimerRunning: !prevState.isTimerRunning\n      }));\n      const isTimeCompleted = currentRunningSeconds === timerLimit * 60;\n\n      if (isTimeCompleted) {\n        this.setState({\n          isTimerRunning: false\n        });\n        this.clearTimer();\n      }\n\n      if (isTimerRunning) {\n        this.clearTimer();\n        this.setState({\n          isTimerRunning: false\n        });\n      } else {\n        this.intervalId = setInterval(() => {\n          this.startTimerCountDown();\n        }, 1000);\n      }\n    };\n\n    this.renderTimerControlOptions = () => {\n      const {\n        isTimerRunning\n      } = this.state;\n      const playImageUrl = 'https://assets.ccbp.in/frontend/react-js/play-icon-img.png';\n      const stopImageUrl = 'https://assets.ccbp.in/frontend/react-js/pause-icon-img.png';\n      const resetImageUrl = 'https://assets.ccbp.in/frontend/react-js/reset-icon-img.png';\n      const startStopImage = isTimerRunning ? stopImageUrl : playImageUrl;\n      const startStopAltText = isTimerRunning ? 'pause icon' : 'play icon';\n      const startStopText = isTimerRunning ? 'Pause' : 'Start';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-options-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-stop-button\",\n          type: \"button\",\n          onClick: this.startStopTimer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"start-stop-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: startStopImage,\n              className: \"start-stop-img\",\n              alt: startStopAltText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"start-stop-text\",\n              children: startStopText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-stop-button\",\n          type: \"button\",\n          onClick: this.onClickResetTimer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"start-stop-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: resetImageUrl,\n              className: \"reset-img\",\n              alt: \"reset icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"start-stop-text\",\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this);\n    };\n\n    this.convertTimeToTimerFormat = () => {\n      const {\n        timerLimit,\n        currentRunningSeconds\n      } = this.state;\n      const timeInSeconds = timerLimit * 60 - currentRunningSeconds;\n      const minutes = Math.floor(timeInSeconds / 60);\n      const seconds = Math.floor(timeInSeconds % 60);\n      const minutesInStringFormat = minutes > 9 ? minutes : `0${minutes}`;\n      const secondsInStringFormat = seconds > 9 ? seconds : `0${seconds}`;\n      return `${minutesInStringFormat}:${secondsInStringFormat}`;\n    };\n  }\n\n  componentWillUnmount() {\n    this.clearTimer();\n  }\n\n  render() {\n    const {\n      isTimerRunning\n    } = this.state;\n    const timerStatusText = isTimerRunning ? 'Running' : 'Paused';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"timer-heading\",\n          children: \"\\u6B63\\u65B9\\u4EFB\\u4E00\\u8FA9\\u624B\\u9648\\u8BCD\\u53D1\\u8A00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"display-timer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"show-time-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-block\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"time-text\",\n              children: this.convertTimeToTimerFormat()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"time-status\",\n              children: timerStatusText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer-control-container\",\n          children: this.renderTimerControlOptions()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default DigitalTimer1;","map":{"version":3,"names":["Component","DigitalTimer1","state","isTimerRunning","timerLimit","currentRunningSeconds","clearTimer","clearInterval","intervalId","onClickResetTimer","setState","startStopTimer","prevState","isTimeCompleted","setInterval","startTimerCountDown","renderTimerControlOptions","playImageUrl","stopImageUrl","resetImageUrl","startStopImage","startStopAltText","startStopText","convertTimeToTimerFormat","timeInSeconds","minutes","Math","floor","seconds","minutesInStringFormat","secondsInStringFormat","componentWillUnmount","render","timerStatusText"],"sources":["C:/Users/hengngua/OneDrive - Intel Corporation/Desktop/Learn/timer/debate-timer2/src/components/DigitalTimer1/index.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport './index.css'\r\n\r\nclass DigitalTimer1 extends Component {\r\n    state = {\r\n      isTimerRunning: false,\r\n      timerLimit: 4,\r\n      currentRunningSeconds: 0,\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clearTimer()\r\n    }\r\n    \r\n    clearTimer = () => {\r\n        clearInterval(this.intervalId)\r\n    }\r\n    \r\n    onClickResetTimer = () => {\r\n        // this.notifyTimerReset('Timer has me reset to default')\r\n        this.setState({\r\n          isTimerRunning: false,\r\n          timerLimit: 25,\r\n          currentRunningSeconds: 0,\r\n        })\r\n        this.clearTimer()\r\n    }\r\n    \r\n    startStopTimer = () => {\r\n        const {isTimerRunning, currentRunningSeconds, timerLimit} = this.state\r\n        this.setState(prevState => ({isTimerRunning: !prevState.isTimerRunning}))\r\n        const isTimeCompleted = currentRunningSeconds === timerLimit * 60\r\n        if (isTimeCompleted) {\r\n          this.setState({isTimerRunning: false})\r\n          this.clearTimer()\r\n        }\r\n        if (isTimerRunning) {\r\n          this.clearTimer()\r\n          this.setState({isTimerRunning: false})\r\n        } else {\r\n          this.intervalId = setInterval(() => {\r\n            this.startTimerCountDown()\r\n          }, 1000)\r\n        }\r\n    }\r\n\r\n    renderTimerControlOptions = () => {\r\n        const {isTimerRunning} = this.state\r\n        const playImageUrl =\r\n          'https://assets.ccbp.in/frontend/react-js/play-icon-img.png'\r\n        const stopImageUrl =\r\n          'https://assets.ccbp.in/frontend/react-js/pause-icon-img.png'\r\n        const resetImageUrl =\r\n          'https://assets.ccbp.in/frontend/react-js/reset-icon-img.png'\r\n        const startStopImage = isTimerRunning ? stopImageUrl : playImageUrl\r\n        const startStopAltText = isTimerRunning ? 'pause icon' : 'play icon'\r\n        const startStopText = isTimerRunning ? 'Pause' : 'Start'\r\n        return (\r\n          <div className=\"control-options-container\">\r\n            <button\r\n              className=\"start-stop-button\"\r\n              type=\"button\"\r\n              onClick={this.startStopTimer}\r\n            >\r\n              <div className=\"start-stop-container\">\r\n                <img\r\n                  src={startStopImage}\r\n                  className=\"start-stop-img\"\r\n                  alt={startStopAltText}\r\n                />\r\n                <h1 className=\"start-stop-text\">{startStopText}</h1>\r\n              </div>\r\n            </button>\r\n    \r\n            <button\r\n              className=\"start-stop-button\"\r\n              type=\"button\"\r\n              onClick={this.onClickResetTimer}\r\n            >\r\n              <div className=\"start-stop-container\">\r\n                <img src={resetImageUrl} className=\"reset-img\" alt=\"reset icon\" />\r\n                <h1 className=\"start-stop-text\">Reset</h1>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        )\r\n    }\r\n\r\n    convertTimeToTimerFormat = () => {\r\n        const {timerLimit, currentRunningSeconds} = this.state\r\n        const timeInSeconds = timerLimit * 60 - currentRunningSeconds\r\n        const minutes = Math.floor(timeInSeconds / 60)\r\n        const seconds = Math.floor(timeInSeconds % 60)\r\n        const minutesInStringFormat = minutes > 9 ? minutes : `0${minutes}`\r\n        const secondsInStringFormat = seconds > 9 ? seconds : `0${seconds}`\r\n        return `${minutesInStringFormat}:${secondsInStringFormat}`\r\n    }\r\n\r\n    render() {\r\n        const {isTimerRunning} = this.state\r\n        const timerStatusText = isTimerRunning ? 'Running' : 'Paused'\r\n        return (\r\n          <div className=\"app-container\">\r\n            <div className=\"header-container\">\r\n              <h1 className=\"timer-heading\">正方任一辩手陈词发言</h1>\r\n            </div>\r\n            <div className=\"display-timer-container\">\r\n              <div className=\"show-time-container\">\r\n                <div className=\"timer-block\">\r\n                  <h1 className=\"time-text\">{this.convertTimeToTimerFormat()}</h1>\r\n                  <p className=\"time-status\">{timerStatusText}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"timer-control-container\">\r\n                {this.renderTimerControlOptions()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default DigitalTimer1"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,aAAP;;;AAEA,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;EAAA;IAAA;IAAA,KAClCE,KADkC,GAC1B;MACNC,cAAc,EAAE,KADV;MAENC,UAAU,EAAE,CAFN;MAGNC,qBAAqB,EAAE;IAHjB,CAD0B;;IAAA,KAWlCC,UAXkC,GAWrB,MAAM;MACfC,aAAa,CAAC,KAAKC,UAAN,CAAb;IACH,CAbiC;;IAAA,KAelCC,iBAfkC,GAed,MAAM;MACtB;MACA,KAAKC,QAAL,CAAc;QACZP,cAAc,EAAE,KADJ;QAEZC,UAAU,EAAE,EAFA;QAGZC,qBAAqB,EAAE;MAHX,CAAd;MAKA,KAAKC,UAAL;IACH,CAvBiC;;IAAA,KAyBlCK,cAzBkC,GAyBjB,MAAM;MACnB,MAAM;QAACR,cAAD;QAAiBE,qBAAjB;QAAwCD;MAAxC,IAAsD,KAAKF,KAAjE;MACA,KAAKQ,QAAL,CAAcE,SAAS,KAAK;QAACT,cAAc,EAAE,CAACS,SAAS,CAACT;MAA5B,CAAL,CAAvB;MACA,MAAMU,eAAe,GAAGR,qBAAqB,KAAKD,UAAU,GAAG,EAA/D;;MACA,IAAIS,eAAJ,EAAqB;QACnB,KAAKH,QAAL,CAAc;UAACP,cAAc,EAAE;QAAjB,CAAd;QACA,KAAKG,UAAL;MACD;;MACD,IAAIH,cAAJ,EAAoB;QAClB,KAAKG,UAAL;QACA,KAAKI,QAAL,CAAc;UAACP,cAAc,EAAE;QAAjB,CAAd;MACD,CAHD,MAGO;QACL,KAAKK,UAAL,GAAkBM,WAAW,CAAC,MAAM;UAClC,KAAKC,mBAAL;QACD,CAF4B,EAE1B,IAF0B,CAA7B;MAGD;IACJ,CAzCiC;;IAAA,KA2ClCC,yBA3CkC,GA2CN,MAAM;MAC9B,MAAM;QAACb;MAAD,IAAmB,KAAKD,KAA9B;MACA,MAAMe,YAAY,GAChB,4DADF;MAEA,MAAMC,YAAY,GAChB,6DADF;MAEA,MAAMC,aAAa,GACjB,6DADF;MAEA,MAAMC,cAAc,GAAGjB,cAAc,GAAGe,YAAH,GAAkBD,YAAvD;MACA,MAAMI,gBAAgB,GAAGlB,cAAc,GAAG,YAAH,GAAkB,WAAzD;MACA,MAAMmB,aAAa,GAAGnB,cAAc,GAAG,OAAH,GAAa,OAAjD;MACA,oBACE;QAAK,SAAS,EAAC,2BAAf;QAAA,wBACE;UACE,SAAS,EAAC,mBADZ;UAEE,IAAI,EAAC,QAFP;UAGE,OAAO,EAAE,KAAKQ,cAHhB;UAAA,uBAKE;YAAK,SAAS,EAAC,sBAAf;YAAA,wBACE;cACE,GAAG,EAAES,cADP;cAEE,SAAS,EAAC,gBAFZ;cAGE,GAAG,EAAEC;YAHP;cAAA;cAAA;cAAA;YAAA,QADF,eAME;cAAI,SAAS,EAAC,iBAAd;cAAA,UAAiCC;YAAjC;cAAA;cAAA;cAAA;YAAA,QANF;UAAA;YAAA;YAAA;YAAA;UAAA;QALF;UAAA;UAAA;UAAA;QAAA,QADF,eAgBE;UACE,SAAS,EAAC,mBADZ;UAEE,IAAI,EAAC,QAFP;UAGE,OAAO,EAAE,KAAKb,iBAHhB;UAAA,uBAKE;YAAK,SAAS,EAAC,sBAAf;YAAA,wBACE;cAAK,GAAG,EAAEU,aAAV;cAAyB,SAAS,EAAC,WAAnC;cAA+C,GAAG,EAAC;YAAnD;cAAA;cAAA;cAAA;YAAA,QADF,eAEE;cAAI,SAAS,EAAC,iBAAd;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAFF;UAAA;YAAA;YAAA;YAAA;UAAA;QALF;UAAA;UAAA;UAAA;QAAA,QAhBF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF;IA6BH,CAnFiC;;IAAA,KAqFlCI,wBArFkC,GAqFP,MAAM;MAC7B,MAAM;QAACnB,UAAD;QAAaC;MAAb,IAAsC,KAAKH,KAAjD;MACA,MAAMsB,aAAa,GAAGpB,UAAU,GAAG,EAAb,GAAkBC,qBAAxC;MACA,MAAMoB,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,aAAa,GAAG,EAA3B,CAAhB;MACA,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWH,aAAa,GAAG,EAA3B,CAAhB;MACA,MAAMK,qBAAqB,GAAGJ,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAyB,IAAGA,OAAQ,EAAlE;MACA,MAAMK,qBAAqB,GAAGF,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAyB,IAAGA,OAAQ,EAAlE;MACA,OAAQ,GAAEC,qBAAsB,IAAGC,qBAAsB,EAAzD;IACH,CA7FiC;EAAA;;EAOlCC,oBAAoB,GAAG;IACnB,KAAKzB,UAAL;EACH;;EAsFD0B,MAAM,GAAG;IACL,MAAM;MAAC7B;IAAD,IAAmB,KAAKD,KAA9B;IACA,MAAM+B,eAAe,GAAG9B,cAAc,GAAG,SAAH,GAAe,QAArD;IACA,oBACE;MAAK,SAAS,EAAC,eAAf;MAAA,wBACE;QAAK,SAAS,EAAC,kBAAf;QAAA,uBACE;UAAI,SAAS,EAAC,eAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eAIE;QAAK,SAAS,EAAC,yBAAf;QAAA,wBACE;UAAK,SAAS,EAAC,qBAAf;UAAA,uBACE;YAAK,SAAS,EAAC,aAAf;YAAA,wBACE;cAAI,SAAS,EAAC,WAAd;cAAA,UAA2B,KAAKoB,wBAAL;YAA3B;cAAA;cAAA;cAAA;YAAA,QADF,eAEE;cAAG,SAAS,EAAC,aAAb;cAAA,UAA4BU;YAA5B;cAAA;cAAA;cAAA;YAAA,QAFF;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QADF,eAOE;UAAK,SAAS,EAAC,yBAAf;UAAA,UACG,KAAKjB,yBAAL;QADH;UAAA;UAAA;UAAA;QAAA,QAPF;MAAA;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAkBD;;AApH+B;;AAuHtC,eAAef,aAAf"},"metadata":{},"sourceType":"module"}